#include "/Engine/Private/Common.ush"

RWTexture2D<float4> OutputSurface;


struct Ray
{
	float3 origin;
	float3 direction;
};

float3 point_at(float t, Ray ray)
{
	return ray.origin + t * ray.direction;
}

float3 RenderSenceColor(Ray r)
{
	float3 uint_direction = normalize(r.direction);
	float t = 0.5 * (uint_direction.z + 1);
	return (1.0 - t) * float3(1.0, 1.0, 1.0) + t * float3(0.5, 0.7, 1.0);
}



[numthreads(32, 32, 1)]
void MainCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	float sizeX, sizeY;
	OutputSurface.GetDimensions(sizeX, sizeY);

	float2 iResolution = float2(sizeX, sizeY);
	float2 uv = (DispatchThreadId.xy / iResolution.xy);


	float3 lower_left_center = float3(-2.0f, 1.0f, -1.0f);
	float3 horizontal = float3(4.0f, 0.0f, 0.0f);
	float3 vectical = float3(0.0f, 0.0f, 2.0f);
	float3 origin = float3(0.0f, 0.0f, 0.0f);

	Ray rayline;
	rayline.origin = origin;
	rayline.direction = lower_left_center + uv.x * horizontal + uv.y * vectical;
	float3 color = RenderSenceColor(rayline);

	OutputSurface[DispatchThreadId.xy] = float4(color, 1);
}

